{"version":3,"file":"weather-comp.js","sourceRoot":"","sources":["../../../src/components/weather-comp/weather-comp.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Method, Prop, State, Element, Watch } from \"@stencil/core\";\r\nimport { AV_API_KEY } from \"../global-use/my-api-key\";\r\n\r\n\r\n\r\n@Component({\r\n    tag: 'jji-weather-comp',\r\n    styleUrl: './weather-comp.css',\r\n    shadow: true,\r\n})\r\nexport class WeatherComp {\r\n    inputCityCountry: HTMLInputElement;\r\n\r\n\r\n\r\n\r\n    @Element() el: HTMLElement;\r\n\r\n\r\n    @Prop({ reflect: true, }) tit: string;\r\n    @Prop({ reflect: true, mutable: true }) visible: boolean;\r\n    @Prop({ reflect: true, mutable: true }) countryCityEnteredByUser: string;\r\n    @Prop({ reflect: true, mutable: true }) numbeOfDaysToForecast: number;\r\n\r\n\r\n    @Watch('countryCityEnteredByUser')\r\n    weatherCityCountryChange(newValue: string, oldValue: string) {\r\n        if (newValue !== oldValue) {\r\n            this.countryUserInput = newValue;\r\n            this.fetchCountryCityWeather(newValue, this.numberOfDaysToBeForecasted);\r\n        }\r\n    }\r\n\r\n    @Watch('numbeOfDaysToForecast')\r\n    // handleDaysToForecastChange(event: Event) {\r\n    //     const selectedOption = (event.target as HTMLSelectElement).value;\r\n    //     this.numberOfDaysToBeForecasted = parseInt(selectedOption);\r\n    // }\r\n    handleDaysToForecastChange(event: Event) {\r\n        const selectedOption = (event.target as HTMLSelectElement).value;\r\n        const newNumberOfDaysToForecast = parseInt(selectedOption);\r\n\r\n        if (newNumberOfDaysToForecast !== this.numberOfDaysToBeForecasted) {\r\n            this.numberOfDaysToBeForecasted = newNumberOfDaysToForecast;\r\n\r\n            if (this.countryCityEnteredByUser) {\r\n                this.fetchCountryCityWeather(this.countryCityEnteredByUser, this.numberOfDaysToBeForecasted);\r\n            }\r\n        }\r\n    }\r\n\r\n    @State() fetchedCountry: string;\r\n    @State() fetchedCity: string;\r\n\r\n    @State() fetchedCurrentDate: Date;\r\n    @State() fetchedCurrentTemperature: number;\r\n    @State() fetchedCurrentWind: number;\r\n    @State() fetchedCurrentHumidity: number;\r\n\r\n    @State() fetchedPlusOneCurrentDate: Date;\r\n    @State() fetchedPlusOneCurrentTemperature: number;\r\n    @State() fetchedPlusOneCurrentWind: number;\r\n    @State() fetchedPlusOneCurrentHumidity: number;\r\n\r\n    @State() fetchedPlusTwoCurrentDate: Date;\r\n    @State() fetchedPlusTwoCurrentTemperature: number;\r\n    @State() fetchedPlusTwoCurrentWind: number;\r\n    @State() fetchedPlusTwoCurrentHumidity: number;\r\n\r\n\r\n\r\n    @State() countryUserInput: string;\r\n    @State() inputCityCountryValid = false;\r\n    @State() error: string;\r\n    @State() forecastData: {\r\n        date: Date;\r\n        temperature: number;\r\n        wind: number;\r\n        humidity: number;\r\n    }[] = [];\r\n\r\n\r\n    @State() numberOfDaysToBeForecasted: number;\r\n\r\n\r\n    @Method()\r\n    async openWeatherComp() {\r\n        console.log('Snow Is Coming...');\r\n        this.visible = true;\r\n    }\r\n    closeWeatherComp() {\r\n        console.log('Back To Summer...');\r\n        this.visible = false;\r\n        this.fetchedCountry = '';\r\n        this.fetchedCity = '';\r\n    }\r\n\r\n\r\n    onUserInput(event: Event) {\r\n        this.countryUserInput = (event.target as HTMLInputElement).value;\r\n        if (this.countryUserInput.trim() !== '') {\r\n            this.inputCityCountryValid = true;\r\n        }\r\n        else {\r\n            this.inputCityCountryValid = false;\r\n        }\r\n    }\r\n\r\n    onFetchWeatherData(event: Event) {\r\n        event.preventDefault();\r\n        this.countryCityEnteredByUser = this.inputCityCountry.value;\r\n        console.log('Submitted!');\r\n\r\n    }\r\n\r\n\r\n\r\n    componentWillLoad() {\r\n        if (this.countryCityEnteredByUser && this.numbeOfDaysToForecast) {\r\n            (this.countryUserInput = this.countryCityEnteredByUser) && (this.numberOfDaysToBeForecasted = this.numbeOfDaysToForecast);\r\n            this.inputCityCountryValid = true;\r\n            this.fetchCountryCityWeather[(this.countryCityEnteredByUser, this.numbeOfDaysToForecast)];\r\n        }\r\n    }\r\n\r\n\r\n\r\n    fetchCountryCityWeather(countryCityEntered: string, numbeOfDaysToForecast: number) {\r\n        fetch(\r\n\r\n            `http://api.weatherapi.com/v1/forecast.json?key=${AV_API_KEY}&q=${countryCityEntered}&days=${numbeOfDaysToForecast}&aqi=no&alerts=no`\r\n        )\r\n            .then(res => {\r\n                if (res.status !== 200) {\r\n                    throw new Error('Invalid!!');\r\n                }\r\n                return res.json()\r\n\r\n            })\r\n            // .then(parsedRes => {\r\n\r\n            //     console.log(parsedRes)\r\n            // if (!parsedRes['location']['country']) {\r\n            //     throw new Error('Invalid Entry!');\r\n            // }\r\n\r\n            // this.error = null;\r\n            // this.fetchedCountry = parsedRes['location']['country'];\r\n            // this.fetchedCity = parsedRes['location']['name'];\r\n            // this.fetchedCurrentTemperature = parsedRes['current']['temp_c'];\r\n            // this.fetchedCurrentWind = parsedRes['current']['wind_kph'];\r\n            // this.fetchedCurrentHumidity = parsedRes['current']['humidity'];\r\n            // this.fetchedCurrentDate = parsedRes['forecast']['forecastday'][0]['date'];\r\n\r\n            // this.fetchedPlusOneCurrentDate = parsedRes['forecast']['forecastday'][1]['date'];\r\n            // this.fetchedPlusOneCurrentTemperature = parsedRes['forecast']['forecastday'][1]['day']['avgtemp_c'];\r\n            // this.fetchedPlusOneCurrentWind = parsedRes['forecast']['forecastday'][1]['day']['maxwind_kph'];\r\n            // this.fetchedPlusOneCurrentHumidity = parsedRes['forecast']['forecastday'][1]['day']['avghumidity'];\r\n\r\n            // this.fetchedPlusTwoCurrentDate = parsedRes['forecast']['forecastday'][2]['date'];\r\n            // this.fetchedPlusTwoCurrentTemperature = parsedRes['forecast']['forecastday'][2]['day']['avgtemp_c'];\r\n            // this.fetchedPlusTwoCurrentWind = parsedRes['forecast']['forecastday'][2]['day']['maxwind_kph'];\r\n            // this.fetchedPlusTwoCurrentHumidity = parsedRes['forecast']['forecastday'][2]['day']['avghumidity'];\r\n\r\n\r\n            .then(parsedRes => {\r\n\r\n                console.log(parsedRes)\r\n                if (!parsedRes['location']['country']) {\r\n                    throw new Error('Invalid Entry!');\r\n                }\r\n                this.error = null;\r\n                this.fetchedCountry = parsedRes['location']['country'];\r\n                this.fetchedCity = parsedRes['location']['name'];\r\n\r\n                this.forecastData = parsedRes['forecast']['forecastday'].map((day: any) => ({\r\n                    date: day['date'],\r\n                    temperature: day['day']['avgtemp_c'],\r\n                    wind: day['day']['maxwind_kph'],\r\n                    humidity: day['day']['avghumidity'],\r\n                    icon: day['day']['condition']['icon']\r\n                }));\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.error = err.message;\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let mainContent = null;\r\n        let secondContent = null;\r\n        let thirdContent = null;\r\n\r\n        if (this.visible) {\r\n            \r\n            mainContent = (\r\n\r\n                <div>\r\n                    <header>\r\n                        <h1>{this.tit}</h1>\r\n                        <button onClick={this.closeWeatherComp.bind(this)}>X</button>\r\n                    </header>\r\n                    <form onSubmit={this.onFetchWeatherData.bind(this)}>\r\n                        <div class=\"input-container\">\r\n                            <label>Enter A Country\\City:\r\n                                <input\r\n                                    placeholder=\"Country: Italy\\City: Batroun\"\r\n                                    id=\"country-city-input\"\r\n                                    ref={el => this.inputCityCountry = el}\r\n                                    value={this.countryUserInput}\r\n                                    onInput={this.onUserInput.bind(this)}\r\n                                /> </label>\r\n                        </div>\r\n                        <div>\r\n                            <select name=\"daysToForecast\" id=\"daysToForecast\" onChange={this.handleDaysToForecastChange.bind(this)}>\r\n                                <option value=\"\" disabled selected hidden>Days To Forecast</option>\r\n                                <option value=\"0\">Current</option>\r\n                                <option value=\"2\">Tomorrow</option>\r\n                                <option value=\"3\">After Tomorrow</option>\r\n                                <option value=\"4\">With Next 3 Days</option>\r\n                                <option value=\"5\">With Next 4 Days</option>\r\n                            </select>\r\n                        </div>\r\n                        {/* <div>\r\n                            <label>Enter A Date: <input placeholder=\"Day/Month/Year\" id=\"date-input\" /> </label>\r\n                        </div> */}\r\n\r\n                        <div>\r\n                            <button type=\"submit\" class=\"button-40\" role=\"button\" disabled={!this.inputCityCountryValid}>Strike Me</button>\r\n                        </div>\r\n\r\n                    </form >\r\n                </div >\r\n\r\n\r\n            )\r\n\r\n            if (this.error) {\r\n                secondContent = (\r\n                    <div>\r\n                        <div class=\"error-message\"><h1>{this.error}</h1></div>\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                thirdContent = (\r\n                    <div class=\"location\">\r\n                        <div class=\"info\">\r\n                            <h1>Country: {this.fetchedCountry}</h1>\r\n                            <h3>City: {this.fetchedCity}</h3>\r\n                        </div>\r\n                    </div>\r\n                )\r\n                secondContent = (\r\n                    <div class=\"container\">\r\n                        {/* <div class=\"box\">\r\n                            <h3>Date: {this.fetchedCurrentDate}</h3>\r\n                            <h4>Temperature Today: {this.fetchedCurrentTemperature}&deg;C</h4>\r\n                            <h4>Wind Today: {this.fetchedCurrentWind}kph</h4>\r\n                            <h4>Humidity Today: {this.fetchedCurrentHumidity}%</h4>\r\n                        </div>\r\n\r\n                        <div class=\"box\">\r\n                            <h3>Date: {this.fetchedPlusOneCurrentDate}</h3>\r\n                            <h4>Temperature Today: {this.fetchedPlusOneCurrentTemperature}&deg;C</h4>\r\n                            <h4>Wind Today: {this.fetchedPlusOneCurrentWind}kph</h4>\r\n                            <h4>Humidity Today: {this.fetchedPlusOneCurrentHumidity}%</h4>\r\n                        </div>\r\n\r\n                        <div class=\"box\">\r\n                            <h3>Date: {this.fetchedPlusTwoCurrentDate}</h3>\r\n                            <h4>Temperature Today: {this.fetchedPlusTwoCurrentTemperature}&deg;C</h4>\r\n                            <h4>Wind Today: {this.fetchedPlusTwoCurrentWind}kph</h4>\r\n                            <h4>Humidity Today: {this.fetchedPlusTwoCurrentHumidity}%</h4>\r\n                        </div> */}\r\n\r\n\r\n                        {this.forecastData.map(day => (\r\n                            <div class=\"box\">\r\n                                <h3>Date: {day.date}</h3>\r\n                                <img\r\n                                    src={\r\n                                        day.temperature < 10\r\n                                            ? \"../../assets/icons/13d.png\"\r\n                                            : day.temperature >= 10 && day.temperature < 20\r\n                                                ? \"../../assets/icons/03d.png\"\r\n                                                : day.temperature >= 20 && day.temperature < 27\r\n                                                    ? \"../../assets/icons/02d.png\"\r\n                                                    : \"../../assets/icons/01d.png\"\r\n                                    }\r\n                                    alt=\"weather\"\r\n                                />\r\n                                <h2>{day.temperature}&deg;C</h2>\r\n                                <h4>Wind Today: {day.wind}kph</h4>\r\n                                <h4>Humidity Today: {day.humidity}%</h4>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        }\r\n        let asideClass = this.numberOfDaysToBeForecasted > 1 ? 'expanded' : '';\r\n        return [\r\n            <div class={`backdrop ${asideClass}`} onClick={this.closeWeatherComp.bind(this)}></div>,\r\n            <aside class={asideClass}>\r\n                <main>\r\n                    {mainContent}\r\n                    \r\n                        {thirdContent}\r\n                        {/* <img src=\"../../assets/icons/01d.png\" alt=\"weather\" /> */}\r\n    \r\n                </main>\r\n\r\n                \r\n                    {secondContent}\r\n                \r\n\r\n            </aside >,\r\n        ];\r\n    }\r\n}\r\n\r\n\r\n"]}